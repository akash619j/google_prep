//implement a stack with push, pop, top, and getMin- returning the minimum element among the stack elements

class MinStack {
public:
    
    stack<pair<int,int> >s;
    /** initialize your data structure here. */
    MinStack() {
        while(!s.empty())
            s.pop();
    }
    
    void push(int x) {
        
        int val=x;
        if(!s.empty())
            val=s.top().second;
        s.push(make_pair(x,min(x,val)));
    }
    
    void pop() {
        if(!s.empty())
            s.pop();
    }
    
    int top() {
        
        if(!s.empty())
            return s.top().first;
        return -1;
    }
    
    int getMin() {
        
        if(!s.empty())
            return s.top().second;
        return -1;
    }
};

Time Complexxity: O(1)