/*

Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by 
deleting some (can be none) of the characters without disturbing the relative positions
of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.

*/

SOLUTION 1-

int numDistinct(string s, string t) {
        
        int n=s.size(),m=t.size(),i,j;
        int dp[m+1][n+1];
        
        //corner cases
        if(n==0 && m==0)
            return 1;
        if(n==0 || m==0)
            return 0;
            
        //initialisation
        if(s[0]==t[0])
            dp[0][0]=1;
        else
            dp[0][0]=0;
        for(int i=1;i<n;i++)
        {
            if(s[i]==t[0])
                dp[0][i]=1+dp[0][i-1];
            else
                dp[0][i]=dp[0][i-1];
        }
        for(int i=1;i<m;i++)
            dp[i][0]=0;
        
        //main code
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(t[i]==s[j])
                    dp[i][j]=dp[i-1][j-1]+dp[i][j-1];
                else
                    dp[i][j]=dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
}

Time Complexity: O(n*m)
Auxillary Space: O(n*m)


SOLUTION 2 ( SPACE OPTIMIZED SOLN)-

int numDistinct(string s, string t) {
        
        int n=s.size(),m=t.size(),i,j;
        int dp[3][n+1];
        
        //corner cases
        if(n==0 && m==0)
            return 1;
        if(n==0 || m==0)
            return 0;
            
        //initialisation
        if(s[0]==t[0])
            dp[0][0]=1;
        else
            dp[0][0]=0;
        for(int i=1;i<n;i++)
        {
            if(s[i]==t[0])
                dp[0][i]=1+dp[0][i-1];
            else
                dp[0][i]=dp[0][i-1];
        }
        dp[1][0]=0;
        
        //main code
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(t[i]==s[j])
                    dp[1][j]=dp[0][j-1]+dp[1][j-1];
                else
                    dp[1][j]=dp[1][j-1];
            }
            
            for(int j=0;j<n;j++)
                dp[0][j]=dp[1][j];
        }
        return dp[0][n-1];
}

Time Complexity: O(n*m)
Auxillary Space: O(n)