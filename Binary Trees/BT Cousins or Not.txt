//given two nodes determine whether they are cousins or not

/*

Check whether the two given nodes exist always or not.
Tell the interviewer what you think cousin means ie.
the nodes having different parent but are at the 
same level.
Simply do a level order traversal and check whether the given
nodes are cousins or not.

*/

bool isCousins(TreeNode* root,TreeNode* nodeA,TreeNode* nodeB) {

	if(root==NULL)
		return 0;
	
	TreeNode *par1=NULL, *par2=NULL;
	int l1=1,l2=1;
	queue<pair<TreeNode*,int> >q;
	q.push(make_pair(root,1));
	while(!q.empty())
	{
		TreeNode* curr=q.front().first;
		int l=q.front().second;
		q.pop();
		
		if(curr->left)
		{
			if(curr->left==nodeA)
			{
				par1=curr;
				l1=l;
			}
			if(curr->left==nodeB)
			{
				par2=curr;
				l2=l;
			}
			q.push(make_pair(curr->left,l+1));
		}
		if(curr->right)
		{
			if(curr->right==nodeA)
			{
				par1=curr;
				l1=l;
			}
			if(curr->right==nodeB)
			{
				par2=curr;
				l2=l;
			}
			q.push(make_pair(curr->right,l+1));
		}
	}
	if(par1!=par2 && l1==l2)
		return 1;
	return 0;
}

Time Compelexity: O(n)
Auxillary Space: O(n)	