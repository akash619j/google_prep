//print the postorder traversal of the given bt

Recursive soln

void postorder(TreeNode* root)
{
	if(root==NULL)
		return;
	postorder(root->left);
	postorder(root->right);
	cout<<root->val<<" ";
	return;
}

Iterative soln ( Using two stacks )

void postorder(TreeNode* root)
{
	if(root==NULL)
		return;
	
	stack<TreeNode* >s1;
	stack<TreeNode* >s2;
	s1.push(root);
	while(!s1.empty())
	{
		TreeNode* curr=s1.top();
		s2.push(curr);
		s1.pop();
		
		//pushing left node before right so that s2 will print the left node before right one
		if(curr->left)	
			s1.push(curr->left);
		if(curr->right)
			s1.push(curr->right);
	}
	
	//printing the postorder traversal of the bt
	while(!s2.empty())
	{
		TreeNode* curr=s2.top();
		cout<<curr->val<<" ";
		s2.pop();
	}
}

Iterative soln ( using one stack )

Algorithm: 

1.1 Create an empty stack
2.1 Do following while root is not NULL
    a) Push root's right child and then root to stack.
    b) Set root as root's left child.
2.2 Pop an item from stack and set it as root.
    a) If the popped item has a right child and the right child 
       is at top of stack, then remove the right child from stack,
       push the root back and set root as root's right child.
    b) Else print root's data and set root as NULL.
2.3 Repeat steps 2.1 and 2.2 while stack is not empty.


void postorderTraversal(TreeNode* root) {
        
        if(root==NULL)
            return;
            
        stack<TreeNode* >s;
        do{
            
            while(root!=NULL)
            {
                if(root->right)
                    s.push(root->right);
                s.push(root);
                root=root->left;
            }
            
            TreeNode* curr=s.top();
            s.pop();
            
            if(!s.empty() && curr->right==s.top())
            {
                TreeNode* node=s.top();
                s.pop();
                s.push(curr);
                root=node;
            }
            else
            {
                cout<<(curr->val)<<" ";
                root=NULL;
            }
            
        }while(!s.empty());
        
        return answer;
}

Time Complexity: O(n)