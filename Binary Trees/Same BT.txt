// given two binary trees whose roots are given, detemine whether they are same or not


SOLN 1 (Recursive)-

bool isSame(TreeNode* root1, TreeNode* root2)
{
	if(root1==NULL && root2==NULL)
		return 1;
	if(root1==NULL || root2==NULL)
		return 0;
	if(root1->val==root2->val)
		return isSame(root1->left,root2->left) && isSame(root1->right,root2->right);
	return 0;
}


SOLN 2 (Iterative)-

bool isSame(node* root1,node* root2) {

	if(root1==NULL && root2==NULL)
		return 1;
	if(root1==NULL || root2==NULL)
		return 0;
	
	queue<node*>q1;
	queue<node*>q2;
	
	q1.push(root1);
	q2.push(root2);
	while(!q1.empty())
	{
		node* curr1=q1.front();
		node* curr2=q2.front();

		if(curr1->val!=curr2->val)
			return 0;

		q1.pop();
		q2.pop();
	
		if(curr1->left && curr2->left)
		{
			q1.push(curr1->left);
			q2.push(curr2->left);
		}
		if(curr1->left || curr2->left)
			return 0;

		if(curr1->right && curr2->right)
		{
			q1.push(curr1->right);
			q2.push(curr2->right);
		}
		if(curr1->right || curr2->right)
			return 0;
	}
	return 1;
}
Time Complexity: O(n)
Auxillary Space: O(n)