//given a bst print the node values bw k1 and k2

/*

do a inorder traversal of the given
bst using some conditions to print 
the values from k1 to k2 lying in the
given bst.

*/


Code:

void printBST(node* root, int k1, int k2)
{
	if(root==NULL)
		return;
	
	int val=root->val;
	if(val>k1)
		printBST(root->left,k1,k2);
	if(val>=k1 && val<=k2)
		cout<<val<<" ";
	if(val<k2)
		printBST(root->right,k1,k2);
	return;
}
Time Complexity: O(h+k2-k1)
Auxillary Space: O(h+k2-k1)


int count(node* root, int k1, int k2)
{
	if(root==NULL)
		return 0;
	
	if(root->key>=k1 && root->key<=k2)
		return 1 + count(root->left,k1,k2) + count(root->right,k1,k2);
	
	if(root->key>k2)
		return count(root->left,k1,k2);
	else
		return count(root->right,k1,k2);
}
Time Complexity: O(h+k2-k1)
Auxillary Space: O(h+k2-k1)