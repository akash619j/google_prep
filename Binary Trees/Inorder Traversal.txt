// print the inorder traversal of the given binary tree

Recursive soln

void inorder(TreeNode* root)
{
	if(root==NULL)
		return;
	inorder(root->left);
	cout<<root->val<<" ";
	inorder(root->right);
	return;
}

Iterative soln

vector<int> inorderTraversal(TreeNode* root) {
        
        vector<int>answer;
        if(root==NULL)
            return answer;
            
        stack<TreeNode* >s;
        TreeNode* curr=root;
        do{
            
            while(curr!=NULL)
            {
                s.push(curr);
                curr=curr->left;
            }
            
            if(!s.empty())
            {
                TreeNode* node=s.top();
                answer.push_back(node->val);
                s.pop();
                curr=node->right;
            }
        }while(!s.empty() || curr!=NULL);
        
	return answer;
}

Time Complexity: O(n)