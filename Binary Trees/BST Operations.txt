//code for basic operations on a bst


Searching in a bst:

bool search(node* root, int val)
{
	if(root==NULL)
		return 0;
	if(root->key==val)
		return 1;
	
	int f=0;
	if(val<root->key)
		f = insert(root->left,val);
	else
		f = insert(root->right,val);
	return f;
}
Time Complexity: O(h)


Inserting a value in a bst:

node* insert(node* root, int val);
{
	if(root==NULL)
		return newNode(val);
	
	if(val<root->key)
		root->left = insert(root->left,val);
	else if(val>root->key)
		root->right = insert(root->right,val);
	
	return root;
}
Time Complexity: O(h)


Deleting a value from a bst:

node* minValueNode(node* root)
{
	node* curr=root;
	while(curr->left!=NULL)
		curr=curr->left;
	return curr;
}

node* deleteNode(node* root, int key)
{
	if(root==NULL)
		return root;
	
	if(key<root->val)
		root->left = deleteNode(root->left,key);
	else if(key>root->val)
		root->right = deleteNode(root->right,key);
	else
	{
		if(root->left==NULL)
		{
			node* temp = root->right;
			free(root);
			return temp;
		}
		else if(root->right==NULL)
		{
			node* temp = root->left;
			free(root);
			return temp;
		}
		
		node* temp = minValueNode(root->right);
		root->val = temp->val;
		root->right = deleteNode(root->right, temp->val);
		
	}
	return root;
}
Time Complexity: O(h)