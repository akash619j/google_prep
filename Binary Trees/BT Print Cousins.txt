//print the cousins of the given node in a bt

/*

Ask the interviewer what cousin actually means.
should i print the entire level on which node 
lies or except the siblings in that level.

*/


void printCousins(TreeNode* root,int level,TreeNode* par) {
	
	queue<pair<TreeNode*,int> >q;
	q.push(make_pair(root,1));
	while(!q.empty())
	{
		TreeNode* curr=q.front().first;
		int l=q.front().second;
		q.pop();
		
		if(curr->left)
		{
			if(curr!=par && l==level)
				cout<<curr->left->val<<" ";
			q.push(make_pair(curr->left,l+1));
		}
		if(curr->right)
		{
			if(curr!=par && l==level)
				cout<<curr->right->val<<" ";
			q.push(make_pair(curr->right,l+1));
		}
	}
	return;
}

void cousins(TreeNode* root,TreeNode* node) {

	if(root==NULL)
		return;

	queue<pair<TreeNode*,int> >q;
	q.push(make_pair(root,1));
	TreeNode* parent=NULL;
	int level=-1;
	while(!q.empty())
	{
		TreeNode* curr=q.front().first;
		int level=q.front().second;
		q.pop();
		
		if(curr->left)
		{
			if(curr->left==node)
				printCousins(root,level,curr);
			q.push(make_pair(curr->left,level+1));
		}
		if(curr->right)
		{
			if(curr->right==node)
				printCousins(root,level,curr);
			q.push(make_pair(curr->right,level+1));
		}
	}
	return;
}
Time Complexity: O(n)
Auxillary Space: O(n)