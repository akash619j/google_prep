//given two binary trees find whether one is the subtree of another


SOLN 1-

Code:

bool isSame(node* root1, node* root2)
{
	if(root1==NULL && root2==NULL)
		return 1;
	if(root1==NULL || root2==NULL)
		return 0;
	
	if(root1->val==root2->val)
		return isSame(root1->left,root2->left)
		      && isSame(root1->right,root2->right);
	return 0;
}

bool isSub(node* T,node* S)
{
	if(S==NULL)
		return 1;
	if(T==NULL)
		return 0;
	
	if(isSame(T,S))
		return 1;
	return isSub(T->left,S) || isSub(T->right,S);
}
Time Complexity: O(n^2)


SOLN 2-

use the fact the inorder and preorder/postorder traversal
of the bt uniquely ientify it. So for a bt to be a subtree
of another one the preorder traversal and inorder traversal
has to be a substring of the other bt.

Time Complexity: O(n)
Auxillary Space: O(n)