//given a 2D matrix with values find the minimum cost path to go from (0,0) to (n-1,m-1)

SOLN 1-

Recursive soln

int minCost(int mat[][m],int n,int m)
{
	if(n<0 || m<0)
		return INT_MAX;
	
	if(n==0 && m==0)
		return mat[n][m];
	
	return mat[n][m] + min(minCost(mat,n-1,m) , 
			       minCost(mat,n,m-1) ,
			       minCost(mat,n-1,m-1));
}


SOLN 2-

DP SOLN

int minCost(int mat[][m], int n, int m)
{
	for(int i=1;i<m;i++)
		mat[0][i]+=mat[0][i-1];
	for(int i=1;i<n;i++)
		mat[i][0]+=mat[i-1][0];
	
	for(int i=1;i<n;i++)
	{
		for(int j=1;j<m;j++)
			mat[i][j]+=min(mat[i-1][j-1],min(mat[i-1][j],mat[i][j-1]));
	}
	return mat[n-1][m-1];
}

Time Complexity: O(n*m)