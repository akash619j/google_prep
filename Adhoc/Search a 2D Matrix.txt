/*

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

*/


SOLN 1:

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int n=matrix.size(),m=matrix[0].size();
        for(int i=0;i<n;i++)
	{
		int f=binarySearch(0,m-1,target,i);
		if(f==1)
			return 1;
	}
	return 0;
}

Time Complexity: O(n*logm)
Auxillary Space: O(1)


SOLN 2:

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int n=matrix.size(),m=matrix[0].size();
        
	//start from the rightmost element
	int curr1=0,curr2=m-1;
        while(curr1<n && curr2>=0)
        {
            if(matrix[curr1][curr2]==target)
                return 1;
            else if(matrix[curr1][curr2]<target)
                curr1++;
            else
                curr2--;
        }
        return 0;
}

Time Complexity: O(n+m)
Auxillary Space: O(1)