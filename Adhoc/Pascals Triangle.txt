/*

Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

*/

vector<vector<int>> generate(int n) {
        
        int dp[n+1][n+1];
        dp[0][0]=1;
        dp[1][0]=1;
        dp[1][1]=1;
        
        //value of dp(i,j)=dp(i-1,j)+dp(i-1,j-1)
        for(int i=2;i<=n;i++)
        {
            dp[i][0]=1;
            dp[i][i]=1;
            for(int j=1;j<i;j++)
                dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
        }
        
        vector<vector<int> >answer;
        for(int i=0;i<n;i++)
        {
            vector<int>ans;
            for(int j=0;j<=i;j++)
                ans.push_back(dp[i][j]);
            answer.push_back(ans);
        }
        return answer;
}

Time Complexity: O(n^2)
Auxillary Space: O(n^2)

//binomial coeficient method for pascal triangle
vector<vector<int>> generate(int n) {
        
        vector<vector<int> >answer;
        if(n==0)
            return answer;
            
        for(int i=1;i<=n;i++)
        {
            vector<int>ans;
            int c=1;
            for(int j=1;j<=i;j++)
            {
                ans.push_back(c);
                c=c*(i-j)/j;
            }
            answer.push_back(ans);
        }
        return answer;
}

Time Complexity: O(n^2)
Auxillary Complexity: O(1)
